---
import { type MarkdownHeading } from "astro";
import { Picture, Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import ErrorLayout from "../../layouts/ErrorLayout.astro";
import BackToLink from "../../components/ui/BackToLink.astro";
import ErrorBoundary from "../../components/ui/ErrorBoundary.astro";
import AuthorBox from "../../components/blog/AuthorBox.astro";
import KIDisclosure from "../../components/blog/KIDisclosure.astro";
import CategoryTeaser from "../../components/blog/CategoryTeaser.astro";
import ShareButtons from "../../components/blog/ShareButtons.astro";
import ContentDepthControlCompact from "../../components/blog/ContentDepthControlCompact.astro";
import StickyControls from "../../components/blog/StickyControls.astro";
import { getBlogPosts, type BlogPost } from "../../utils/blog";
import { getCategoryImage } from "../../utils/imageImports";

export const prerender = true;

export async function getStaticPaths() {
    const posts = await getBlogPosts();
    const paths = [];

    for (const post of posts) {
        // Strip .md from the ID if it exists
        const baseId = post.id.replace(/\.md$/, "");

        // Add path without .md extension
        paths.push({
            params: { slug: baseId },
            props: { entry: post },
        });

        // Add path with .md extension for 301 redirect
        paths.push({
            params: { slug: `${baseId}.md` },
            props: { entry: post, redirect: true },
        });
    }

    return paths;
}

const { entry, redirect = false } = Astro.props;
const currentPath = Astro.url.pathname;

// Handle 301 redirect for .md URLs
if (redirect || currentPath.endsWith(".md")) {
    return Astro.redirect(currentPath.replace(/\.md$/, ""), 301);
}

// Render content with error handling
let Content, headings, renderError;
try {
    const rendered = await entry.render();
    Content = rendered.Content;
    headings = rendered.headings;
} catch (error) {
    console.error(`Error rendering post ${entry.id}:`, error);
    renderError = error;
}

// Prepare metadata only if no error
let seoTitle,
    seoDescription,
    ogImage,
    authorName,
    authorAvatar,
    articleMetadata;

if (!renderError) {
    seoTitle =
        entry.data.seo?.metaTitle || `${entry.data.title} - Rico Loschke`;
    seoDescription = entry.data.seo?.metaDescription || entry.data.description;
    
    // For SEO, we need a string URL for the ogImage
    // If we have a coverImage (which is an object), we can't use it directly for ogImage
    // So we'll use the seo.ogImage or heroImage (which are strings) for the ogImage
    ogImage = entry.data.seo?.ogImage || entry.data.heroImage || null;
    
    authorName = entry.data.author?.name || "Rico Loschke";
    authorAvatar =
        entry.data.author?.avatar || "/images/rico-loschke_avatar.jpg";
    articleMetadata = {
        publishedTime: entry.data.pubDate.toISOString(),
        modifiedTime: entry.data.updatedDate?.toISOString(),
        authors: [authorName],
        tags: entry.data.tags || [],
    };
}

const formatDate = (date: Date): string => {
    try {
        return new Date(date).toLocaleDateString("de-DE", {
            year: "numeric",
            month: "long",
        });
    } catch {
        return "";
    }
};
---

{
    renderError ? (
        <ErrorLayout
            title="Fehler beim Laden des Artikels"
            description="Der Artikel konnte nicht geladen werden."
        >
            <div class="max-w-4xl mx-auto px-4 sm:px-6 py-12">
                <ErrorBoundary
                    message="Der Artikel konnte nicht geladen werden."
                    error={
                        renderError instanceof Error
                            ? renderError
                            : new Error("Unknown error")
                    }
                />
                <BackToLink href="/blog" />
            </div>
        </ErrorLayout>
    ) : (
        <Layout
            title={seoTitle}
            description={seoDescription}
            ogImage={ogImage || undefined}
            article={articleMetadata}
            canonicalURL={entry.data.seo?.canonicalURL || undefined}
            audioFile={entry.data.audio}
            audioTitle={entry.data.title}
        >
            {/* Sticky controls bar that appears on scroll */}
            <StickyControls 
                title={entry.data.title}
                hasAudio={!!entry.data.audio}
                audioFile={entry.data.audio}
                url={Astro.url.href}
                hasScalableContent={!!entry.data.hasScalableContent}
            />
            <div class="max-w-4xl mx-auto px-4 sm:px-6 pb-12">
                <div class="relative w-full aspect-[16/9] mb-8">
                    {entry.data.coverImage ? (
                        <Image
                            src={entry.data.coverImage}
                            alt={entry.data.title}
                            width={1200}
                            height={675}
                            loading="eager"
                            class="w-full h-full object-cover rounded-xl"
                            transition:name={`hero-${entry.id}`}
                        />
                    ) : entry.data.heroImage ? (
                        <Picture
                            src={entry.data.heroImage}
                            alt={entry.data.title}
                            formats={["avif", "webp"]}
                            fallbackFormat="png"
                            width={1200}
                            height={675}
                            loading="eager"
                            class="w-full h-full object-cover rounded-xl"
                            transition:name={`hero-${entry.id}`}
                        />
                    ) : (
                        <Image
                            src={getCategoryImage(entry.data.categories?.[0])}
                            alt={entry.data.title}
                            width={1200}
                            height={675}
                            format="webp"
                            quality={80}
                            class="w-full h-full object-cover rounded-xl"
                            loading="eager"
                            transition:name={`hero-${entry.id}`}
                        />
                    )}
                </div>

                <div class="text-center">
                    {entry.data.pubDate && (
                        <time
                            datetime={entry.data.pubDate.toISOString()}
                            class="text-white/60"
                            transition:name={`date-${entry.id}`}
                        >
                            {formatDate(entry.data.pubDate)}
                        </time>
                    )}

                    <div class="relative">
                        <h1
                            class="text-4xl md:text-5xl font-bold my-6"
                            transition:name={`title-${entry.id}`}
                        >
                            {entry.data.title}
                        </h1>
                    </div>

                    {entry.data.description && (
                        <p
                            class="text-xl text-white/80"
                            transition:name={`excerpt-${entry.id}`}
                        >
                            {entry.data.description}
                        </p>
                    )}
                    
                    {entry.data.audio && 
                        <button 
                            id="blog-audio-trigger" 
                            class="flex items-center gap-2 mx-auto my-8 px-4 py-2 bg-primary hover:bg-primary-dark text-white rounded-full transition-colors"
                            aria-label={`Artikel "${entry.data.title}" als Audio anhÃ¶ren`}
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 001.414 1.414m2.828-9.9a9 9 0 012.828-2.828" />
                            </svg>
                            <span>Audio Zusammenfassung</span>
                        </button>
                    }

                    {entry.data.categories &&
                        entry.data.categories.length > 0 && (
                            <div
                                class="flex flex-wrap justify-center gap-2 mt-6"
                                transition:name={`categories-${entry.id}`}
                            >
                                {entry.data.categories.map(
                                    (category: string) => (
                                        <a
                                            href={`/blog/category/${category.toLowerCase()}`}
                                            class="px-3 py-1 bg-white/5 rounded-full text-sm hover:bg-white/10 transition-colors"
                                            aria-label={`Artikel in der Kategorie ${category}`}
                                        >
                                            {category}
                                        </a>
                                    ),
                                )}
                            </div>
                        )}

                    <div class="flex items-center justify-center mt-6 gap-3">
                        <Picture
                            src={authorAvatar || "/images/rico-loschke_avatar.jpg"}
                            alt={authorName || "Rico Loschke"}
                            formats={["avif", "webp"]}
                            fallbackFormat="jpg"
                            width={40}
                            height={40}
                            class="rounded-full"
                        />
                        <span class="text-white/80">{authorName}</span>
                    </div>
                    
                </div>
            </div>

            <div class="border-t border-white/5 my-8" role="separator" />

            <div class="max-container container-padding">
                <div class="relative flex flex-col xl:flex-row xl:gap-24">
                    <main class="flex-1">
                        <div class="max-w-[85ch] mx-auto">
                            <article class="prose prose-invert max-w-none bg-base-darker/90 backdrop-blur-sm rounded-xl p-8">
                            {entry.data.hasScalableContent && (
                                <div class="mb-4">
                                    <ContentDepthControlCompact />
                                </div>
                            )}
                            
                            <div class="mb-8">
                                <ShareButtons 
                                    url={Astro.url.href} 
                                    title={entry.data.title} 
                                />
                            </div>
                                
                                <Content />
                                
                                <div class="mt-8">
                                    <ShareButtons 
                                        url={Astro.url.href} 
                                        title={entry.data.title} 
                                    />
                                </div>

                                {entry.data.tags &&
                                    entry.data.tags.length > 0 && (
                                        <div class="mt-12 pt-8 border-t border-white/5">
                                            <div
                                                class="flex flex-wrap gap-2"
                                                role="list"
                                                aria-label="Artikel-Tags"
                                            >
                                                {entry.data.tags.map(
                                                    (tag: string) => (
                                                        <a
                                                            href={`/blog/tag/${tag.toLowerCase()}`}
                                                            class="px-3 py-1 bg-white/5 rounded-full text-sm hover:bg-white/10 transition-colors text-white/80 hover:text-white"
                                                            aria-label={`Artikel mit Tag ${tag}`}
                                                        >
                                                            #{tag}
                                                        </a>
                                                    ),
                                                )}
                                            </div>
                                        </div>
                                    )}

                                <CategoryTeaser 
                                    categories={entry.data.categories || []}
                                />

                                <AuthorBox 
                                    name={authorName}
                                    avatar={authorAvatar}
                                />
                                
                                <KIDisclosure />
                                
                                <footer class="mt-12 pt-8 border-t border-white/5">
                                    <BackToLink href="/blog" />
                                </footer>
                            </article>
                        </div>
                    </main>

                    {headings && headings.length > 0 && (
                        <aside
                            class="hidden xl:block w-80 shrink-0"
                            aria-label="Inhaltsverzeichnis"
                        >
                            <div class="sticky top-36">
                                <div class="p-6 bg-white/5 backdrop-blur-sm rounded-xl">
                                    <h2 class="text-xl font-bold mb-4">
                                        Inhaltsverzeichnis
                                    </h2>
                                    <nav
                                        class="space-y-2"
                                        id="toc-nav"
                                        aria-label="Artikel-Navigation"
                                    >
                                        {headings.map(
                                            (heading: MarkdownHeading) => (
                                                <a
                                                    href={`#${heading.slug}`}
                                                    class={`block transition-colors toc-item
                                            ${heading.depth === 2 ? "ml-0" : ""}
                                            ${heading.depth === 3 ? "ml-4 text-sm" : ""}
                                            ${heading.depth === 4 ? "ml-8 text-sm" : ""}`}
                                                    data-heading={heading.slug}
                                                    aria-level={heading.depth}
                                                >
                                                    {heading.text}
                                                </a>
                                            ),
                                        )}
                                    </nav>
                                </div>
                            </div>
                        </aside>
                    )}
                </div>
            </div>
        </Layout>
    )
}

<style>
    .prose {
        @apply prose-headings:scroll-mt-44;
    }

    .toc-item {
        @apply text-white/60 hover:text-white/80 transition-colors;
    }

    .toc-item.active {
        @apply text-white font-bold;
    }

    nav {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.1) transparent;
    }

    nav::-webkit-scrollbar {
        width: 4px;
    }

    nav::-webkit-scrollbar-track {
        background: transparent;
    }

    nav::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
    }
</style>

<script>
    import "../../scripts/toc";
</script>
