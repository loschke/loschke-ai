---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allAufgaben = await getCollection('aufgaben');
  
  // Get all unique branches
  const branches = [...new Set(allAufgaben.map(aufgabe => aufgabe.data.branch))];
  
  return branches.map(branch => {
    const branchAufgaben = allAufgaben.filter(aufgabe => aufgabe.data.branch === branch);
    return {
      params: { branch },
      props: { aufgaben: branchAufgaben, branch }
    };
  });
}

const { aufgaben, branch } = Astro.props;

// Group by complexity
const complexityGroups = {
  simple: aufgaben.filter(a => a.data.complexity === 'simple'),
  medium: aufgaben.filter(a => a.data.complexity === 'medium'),
  advanced: aufgaben.filter(a => a.data.complexity === 'advanced'),
  complex: aufgaben.filter(a => a.data.complexity === 'complex')
};

// Function to format branch name
function formatBranch(branch) {
  switch(branch) {
    case 'bildung-schule': return 'Bildung & Schule';
    case 'projektmanagement': return 'Projektmanagement';
    case 'anwendungsentwicklung': return 'Anwendungsentwicklung';
    case 'marketing': return 'Marketing';
    // Add more branches here as needed
    default: return branch.replace('-', ' & ').replace(/\b\w/g, l => l.toUpperCase());
  }
}

// Function to check if branch is in progress
function isInProgress(branch) {
  return ['projektmanagement', 'anwendungsentwicklung', 'marketing'].includes(branch);
}

// Function to format complexity
function formatComplexity(complexity) {
  switch(complexity) {
    case 'simple': return 'Einfach';
    case 'medium': return 'Mittel';
    case 'advanced': return 'Fortgeschritten';
    case 'complex': return 'Komplex';
    default: return complexity;
  }
}
---

<Layout title={`KI-Übungsaufgaben: ${formatBranch(branch)}${isInProgress(branch) ? ' (In Progress)' : ''}`}>
  <!-- Sticky Breadcrumb Navigation -->
  <nav class="sticky top-[94px] z-30 bg-gray-800 backdrop-blur-sm border-b border-white/10">
    <div class="container mx-auto px-4 py-3">
      <div class="flex items-center gap-3 text-sm">
        <a href="/aufgaben" class="flex items-center gap-2 text-gray-200 hover:text-blue-300 transition-colors group">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 group-hover:-translate-x-0.5 transition-transform" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 12h18M3 12L9 6m-6 6l6 6"/>
          </svg>
          <span>Aufgaben</span>
        </a>
        <span class="text-white/40">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </span>
        <span class="text-white font-medium px-2 py-1 bg-white/5 rounded">
          {formatBranch(branch)}
          {isInProgress(branch) && (
            <span class="ml-2 text-xs bg-gray-700 text-gray-300 px-1.5 py-0.5 rounded">
              In Progress
            </span>
          )}
        </span>
      </div>
    </div>
  </nav>

  <main class="container mx-auto px-4 py-8">
    <div class="flex items-center gap-3 mb-8">
      <h1 class="text-4xl font-bold">KI-Übungsaufgaben: {formatBranch(branch)}</h1>
      {isInProgress(branch) && (
        <span class="text-sm bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-1 rounded">
          In Progress
        </span>
      )}
    </div>
    
    {isInProgress(branch) && (
      <div class="mb-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
        <p class="text-blue-800 dark:text-blue-200">
          Dieser Bereich befindet sich noch in Entwicklung. Die hier gezeigten Aufgaben sind Vorschauen und werden in Kürze vollständig verfügbar sein.
        </p>
      </div>
    )}
    
    <div class="mb-8">
      <div class="flex flex-wrap gap-2">
        <a href="#einfach" class="px-4 py-2 bg-green-600 text-white rounded-full hover:bg-green-700 transition">
          Einfach ({complexityGroups.simple.length})
        </a>
        <a href="#mittel" class="px-4 py-2 bg-yellow-600 text-white rounded-full hover:bg-yellow-700 transition">
          Mittel ({complexityGroups.medium.length})
        </a>
        <a href="#fortgeschritten" class="px-4 py-2 bg-red-600 text-white rounded-full hover:bg-red-700 transition">
          Fortgeschritten ({complexityGroups.advanced.length})
        </a>
        {complexityGroups.complex.length > 0 && (
          <a href="#komplex" class="px-4 py-2 bg-purple-600 text-white rounded-full hover:bg-purple-700 transition">
            Komplex ({complexityGroups.complex.length})
          </a>
        )}
      </div>
    </div>
    
    {/* Simple exercises */}
    {complexityGroups.simple.length > 0 && (
      <div id="einfach" class="mb-12">
        <h2 class="text-3xl font-bold mb-6 flex items-center">
          <span class="w-3 h-3 bg-green-600 rounded-full mr-3"></span>
          Einfache Übungen
        </h2>
        
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {complexityGroups.simple.map(aufgabe => {
            const slug = aufgabe.slug;
            
            const inProgress = isInProgress(branch);
            
            return (
              <a href={`/aufgaben/${slug}`}
                 class="block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all h-full flex flex-col">
                <h3 class="text-xl font-semibold mb-3">{aufgabe.data.title}</h3>
                <p class="text-gray-600 dark:text-gray-300 flex-grow">{aufgabe.data.description}</p>
                <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <span class="inline-block px-3 py-1 bg-green-600 text-white text-sm font-medium rounded-full">
                    Einfach
                  </span>
                </div>
              </a>
            );
          })}
        </div>
      </div>
    )}
    
    {/* Medium exercises */}
    {complexityGroups.medium.length > 0 && (
      <div id="mittel" class="mb-12">
        <h2 class="text-3xl font-bold mb-6 flex items-center">
          <span class="w-3 h-3 bg-yellow-600 rounded-full mr-3"></span>
          Mittelschwere Übungen
        </h2>
        
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {complexityGroups.medium.map(aufgabe => {
            const slug = aufgabe.slug;
            const inProgress = isInProgress(branch);
            
            return (
              <a href={`/aufgaben/${slug}`}
                 class="block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all h-full flex flex-col">
                <h3 class="text-xl font-semibold mb-3">{aufgabe.data.title}</h3>
                <p class="text-gray-600 dark:text-gray-300 flex-grow">{aufgabe.data.description}</p>
                <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <span class="inline-block px-3 py-1 bg-yellow-600 text-white text-sm font-medium rounded-full">
                    Mittel
                  </span>
                </div>
              </a>
            );
          })}
        </div>
      </div>
    )}
    
    {/* Advanced exercises */}
    {complexityGroups.advanced.length > 0 && (
      <div id="fortgeschritten" class="mb-12">
        <h2 class="text-3xl font-bold mb-6 flex items-center">
          <span class="w-3 h-3 bg-red-600 rounded-full mr-3"></span>
          Fortgeschrittene Übungen
        </h2>
        
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {complexityGroups.advanced.map(aufgabe => {
            const slug = aufgabe.slug;
            const inProgress = isInProgress(branch);
            
            return (
              <a href={`/aufgaben/${slug}`}
                 class="block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all h-full flex flex-col">
                <h3 class="text-xl font-semibold mb-3">{aufgabe.data.title}</h3>
                <p class="text-gray-600 dark:text-gray-300 flex-grow">{aufgabe.data.description}</p>
                <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <span class="inline-block px-3 py-1 bg-red-600 text-white text-sm font-medium rounded-full">
                    Fortgeschritten
                  </span>
                </div>
              </a>
            );
          })}
        </div>
      </div>
    )}
    
    {/* Complex exercises */}
    {complexityGroups.complex.length > 0 && (
      <div id="komplex" class="mb-12">
        <h2 class="text-3xl font-bold mb-6 flex items-center">
          <span class="w-3 h-3 bg-purple-600 rounded-full mr-3"></span>
          Komplexe Übungen
        </h2>
        
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {complexityGroups.complex.map(aufgabe => {
            const slug = aufgabe.slug;
            
            return (
              <a href={`/aufgaben/${slug}`}
                 class="block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all h-full flex flex-col">
                <h3 class="text-xl font-semibold mb-3">{aufgabe.data.title}</h3>
                <p class="text-gray-600 dark:text-gray-300 flex-grow">{aufgabe.data.description}</p>
                <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <span class="inline-block px-3 py-1 bg-purple-600 text-white text-sm font-medium rounded-full">
                    Komplex
                  </span>
                </div>
              </a>
            );
          })}
        </div>
      </div>
    )}
  </main>
</Layout>
