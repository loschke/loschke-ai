---
import Layout from '../layouts/Layout.astro';
import { conceptData, contextData, compositionData, creativityData } from '../data/framework-data';

interface Category {
  name: string;
  description: string;
  icon?: string;
  categories: {
    [key: string]: {
      name: string;
      description: string;
      path: string;
    };
  };
  metadata: {
    order: number;
    tags: string[];
  };
}

// Main categories array using TypeScript imports
const mainCategories: Category[] = [
  conceptData,
  contextData,
  compositionData,
  creativityData
];
---

<Layout title="AI Design Framework Modifiers">
  <!-- Sticky Breadcrumb Navigation -->
  <nav class="sticky top-[94px] z-30 bg-gray-800 backdrop-blur-sm border-b border-white/10">
    <div class="container mx-auto px-4 py-3">
      <div class="flex items-center gap-3 text-sm">
        <a href="/guides" class="flex items-center gap-2 text-gray-200 hover:text-blue-300 transition-colors group">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 group-hover:-translate-x-0.5 transition-transform" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 12h18M3 12L9 6m-6 6l6 6"/>
          </svg>
          <span>Guides</span>
        </a>
        <span class="text-white/40">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </span>
        <span class="text-white font-medium px-2 py-1 bg-white/5 rounded">
          AI-Design Framework
        </span>
      </div>
    </div>
  </nav>

  <main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8">4K | Framework - AI-Design Modifiers</h1>
    <p class="mb-8 text-lg">Eine Sammlung von Prompt Bestandteilen, organisiert nach dem 4K | Framework als Inspiration zur Erstellung von AI-Design Prompts.</p>
    
    <div class="grid gap-8">
      {mainCategories.map(category => (
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
          <h2 class="text-2xl font-bold mb-4 flex items-center gap-2">
            {category.name}
          </h2>
          <p class="text-gray-600 dark:text-gray-300 mb-4">{category.description}</p>
          
          <div class="grid md:grid-cols-2 gap-4">
            {Object.entries(category.categories).map(([key, subcat]) => (
              <a href={`/ai-design-framework/${category.metadata.order}/${key}`}
                 class="block p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition">
                <h3 class="text-xl font-semibold mb-2">{subcat.name}</h3>
                <p class="text-gray-600 dark:text-gray-300">{subcat.description}</p>
              </a>
            ))}
          </div>
        </div>
      ))}
    </div>
  </main>
</Layout>

<style>
  .copy-button {
    @apply px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 transition;
  }
  .copy-button.copied {
    @apply bg-green-500 hover:bg-green-600;
  }
</style>

<script>
  // Add copy functionality
  function setupCopyButtons() {
    document.querySelectorAll('.copy-button').forEach(button => {
      button.addEventListener('click', async () => {
        const text = button.getAttribute('data-copy') || '';
        await navigator.clipboard.writeText(text);
        
        button.textContent = 'Kopiert!';
        button.classList.add('copied');
        
        setTimeout(() => {
          button.textContent = 'Kopieren';
          button.classList.remove('copied');
        }, 2000);
      });
    });
  }

  // Setup on page load
  setupCopyButtons();
  
  // Setup for dynamic content
  document.addEventListener('astro:page-load', setupCopyButtons);
</script>
