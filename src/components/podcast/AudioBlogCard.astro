---
// Card component for displaying audio blog entries in the podcast section
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { getCategoryColorClass } from '../../utils/categoryColors';
import aiDesignImage from '../../assets/blog/ai-design_category_placeholder.png';
import kiAutomationImage from '../../assets/blog/ki-automation_category_placeholder.png';
import kiPraxisImage from '../../assets/blog/ki-praxis_category_placeholder.png';
import kiStrategieImage from '../../assets/blog/ki-strategie_category_placeholder.png';
import kiToolsImage from '../../assets/blog/ki-tools_category_placeholder.png';
import kiTransformationImage from '../../assets/blog/ki-transformation_category_placeholder.png';
import promptEngineeringImage from '../../assets/blog/prompt-engineering_category_placeholder.png';

interface Props {
  slug: string;
  showCategory?: boolean;
}

const { slug, showCategory = true } = Astro.props;

// Get all blog posts that have audio
const blogPosts = await getCollection('blog', (post) => {
  return post.data.audio !== undefined && !post.data.draft;
});

// Find the specific blog post
const post = blogPosts.find(post => post.slug === slug);

if (!post) {
  throw new Error(`Blog post with slug ${slug} not found or has no audio`);
}

// Format date
const formattedDate = new Intl.DateTimeFormat('de-DE', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}).format(post.data.pubDate);

// Get category image based on the first category
const categoryName = post.data.categories[0]?.toLowerCase() || 'default';

// Function to get the appropriate image for the category
const getImageForCategory = (category: string) => {
  switch (category) {
    case 'ai-design':
      return aiDesignImage;
    case 'ki-automation':
      return kiAutomationImage;
    case 'ki-praxis':
      return kiPraxisImage;
    case 'ki-strategie':
      return kiStrategieImage;
    case 'ki-tools':
      return kiToolsImage;
    case 'ki-transformation':
      return kiTransformationImage;
    case 'prompt engineering':
      return promptEngineeringImage;
    default:
      return kiPraxisImage; // Default fallback
  }
};

// Get the appropriate image
const categoryImage = getImageForCategory(categoryName);
---

<div class="podcast-card bg-base-darker rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300">
  <div class="flex flex-col h-full">
    <div class="relative">
      {post.data.heroImage ? (
        <img 
          src={post.data.heroImage} 
          alt={post.data.title} 
          class="w-full aspect-video object-cover object-center"
        />
      ) : (
        <Image 
          src={categoryImage} 
          alt={post.data.title}
          class="w-full aspect-video object-cover object-center"
        />
      )}
      <div class="absolute bottom-0 left-0 w-full bg-gradient-to-t from-base-darker to-transparent h-20"></div>
      {showCategory && post.data.categories && post.data.categories.length > 0 && (
        <div class="absolute top-3 left-3">
          <span class={`px-3 py-1 text-xs font-medium text-white rounded-full ${getCategoryColorClass(post.data.categories[0])}`}>
            {post.data.categories[0]}
          </span>
        </div>
      )}
    </div>
    
    <div class="p-5 flex flex-col flex-grow" style="min-height: 250px;">
      <h3 class="text-xl font-bold text-white mb-2 line-clamp-3 min-h-[3.5rem]">{post.data.title}</h3>
      <p class="text-white/70 text-sm mb-4 line-clamp-2">{post.data.description}</p>
      
      <div class="flex items-center justify-between mt-auto pt-4 border-t border-white/10">
        <button 
          class="play-audio-btn flex items-center gap-2 text-white bg-primary hover:bg-primary-dark transition-colors hover:scale-105 px-3 py-1.5 rounded-full" 
          data-audio-file={post.data.audio}
          data-audio-title={post.data.title}
          aria-label={`${post.data.title} abspielen`}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
          </svg>
          <span class="text-base font-normal text-white">Anh√∂ren</span>
        </button>
        
        <a 
          href={`/blog/${post.slug}`} 
          class="text-sm text-white/60 hover:text-white/90 transition-colors underline-offset-2 hover:underline"
          aria-label="Zur Textversion"
        >
          Textversion
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const playButtons = document.querySelectorAll('.play-audio-btn');
    
    playButtons.forEach(button => {
      button.addEventListener('click', () => {
        const audioFile = button.getAttribute('data-audio-file');
        const audioTitle = button.getAttribute('data-audio-title');
        
        if (audioFile && audioTitle) {
          // Set data attributes on body to trigger audio player
          document.body.dataset.audioFile = audioFile;
          document.body.dataset.articleTitle = audioTitle;
          
          // Trigger custom event to notify audio player
          document.dispatchEvent(new CustomEvent('audioContentChanged'));
          
          // Show audio player
          const audioPlayer = document.getElementById('global-audio-player');
          if (audioPlayer) {
            audioPlayer.classList.remove('translate-y-full');
          }
          
          // Auto play
          const audioElement = document.getElementById('audio-element') as HTMLAudioElement;
          if (audioElement) {
            audioElement.play()
              .then(() => {
                const playIcon = document.getElementById('play-icon');
                const pauseIcon = document.getElementById('pause-icon');
                playIcon?.classList.add('hidden');
                pauseIcon?.classList.remove('hidden');
              })
              .catch(error => {
                console.error('Audio playback failed:', error);
              });
          }
        }
      });
    });
  });
</script>
