---
import Layout from '../../../layouts/Layout.astro';
import ModifierGroup from '../../../components/framework/ModifierGroup.astro';
import { promises as fs } from 'fs';
import path from 'path';

export async function getStaticPaths() {
  const categoryMap = {
    '1': 'concept',
    '2': 'context',
    '3': 'composition',
    '4': 'creativity'
  };

  const paths = [];

  for (const [order, categoryName] of Object.entries(categoryMap)) {
    const categoryData = JSON.parse(
      await fs.readFile(`src/data/${categoryName}/${categoryName}.json`, 'utf-8')
    );

    for (const [subcatKey, subcat] of Object.entries(categoryData.categories)) {
      paths.push({
        params: { order, category: subcatKey },
        props: { categoryName, subcatKey }
      });
    }
  }

  return paths;
}

interface ModifierItem {
  name: string;
  description: string;
  items: string[] | Record<string, string[]>;
}

interface ModifierGroup {
  [key: string]: ModifierItem;
}

interface ModifierSubcategory {
  name: string;
  description: string;
  modifiers: {
    [key: string]: {
      name: string;
      description: string;
      items: string[] | Record<string, string[]>;
    };
  };
}

interface SubcategoryData {
  name: string;
  description: string;
  subcategories: {
    [key: string]: {
      name: string;
      description: string;
      path: string;
    };
  };
}

interface CategoryData {
  name: string;
  description: string;
  categories: {
    [key: string]: {
      name: string;
      description: string;
      path: string;
    };
  };
  metadata: {
    order: number;
    tags: string[];
  };
}

const { categoryName, subcatKey } = Astro.props;

// Read the category data for navigation
const categoryData: CategoryData = JSON.parse(
  await fs.readFile(`src/data/${categoryName}/${categoryName}.json`, 'utf-8')
);

// Read the subcategory data
const subcategoryData: SubcategoryData = JSON.parse(
  await fs.readFile(`src/data/${categoryName}/${subcatKey}/${subcatKey}.json`, 'utf-8')
);

// Read all modifier files from subcategories
const modifierGroups: ModifierSubcategory[] = [];
const subcategoryDir = `src/data/${categoryName}/${subcatKey}`;
const entries = await fs.readdir(subcategoryDir, { withFileTypes: true });

for (const entry of entries) {
  if (entry.isDirectory()) {
    try {
      const modifierData = JSON.parse(
        await fs.readFile(`${subcategoryDir}/${entry.name}/${entry.name}.json`, 'utf-8')
      );
      modifierGroups.push(modifierData);
    } catch (error) {
      console.error(`Error reading modifier file for ${entry.name}:`, error);
    }
  }
}
---

<Layout title={`${subcategoryData.name} - AI Design Framework Modifiers`}>
  <nav class="sticky top-[94px] z-30 bg-gray-800 backdrop-blur-sm border-b border-white/10">
    <div class="container mx-auto px-4 py-3">
      <div class="flex items-center gap-3 text-sm">
        <a href="/ai-design-framework" class="flex items-center gap-2 text-gray-200 hover:text-blue-300 transition-colors group">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 group-hover:-translate-x-0.5 transition-transform" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 12h18M3 12L9 6m-6 6l6 6"/>
          </svg>
          <span>Ãœbersicht</span>
        </a>
        <span class="text-white/40">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </span>
        <a href="/ai-design-framework" class="text-white/70 hover:text-white transition-colors px-2 py-1 rounded hover:bg-white/5">
          {categoryData.name}
        </a>
        <span class="text-white/40">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </span>
        <span class="text-white font-medium px-2 py-1 bg-white/5 rounded">
          {subcategoryData.name}
        </span>
      </div>
    </div>
  </nav>

  <main class="container mx-auto px-4 py-6">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-300 mb-2">{subcategoryData.name}</h1>
      <p class="text-base text-gray-200">{subcategoryData.description}</p>
    </div>

    <div class="space-y-8 bg-gray-800 p-6 rounded-lg">
      {modifierGroups.length > 0 ? (
        modifierGroups.map(group => (
          <div>
            <h2 class="text-xl font-bold text-white mb-4">{group.name}</h2>
            <div class="space-y-3">
              {Object.entries(group.modifiers || {}).map(([key, modifier]) => (
                <ModifierGroup
                  name={modifier.name}
                  description={modifier.description}
                  items={modifier.items}
                />
              ))}
            </div>
          </div>
        ))
      ) : (
        <div class="p-6">
          <p class="text-white/60">
            Keine Modifier in dieser Kategorie gefunden.
          </p>
        </div>
      )}
    </div>

    {/* Debug output */}
    {import.meta.env.DEV && (
      <details class="mt-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
        <summary class="cursor-pointer">Debug Info</summary>
        <pre class="mt-2 text-xs overflow-auto">
          {JSON.stringify({ subcategoryData, categoryData, modifierGroups }, null, 2)}
        </pre>
      </details>
    )}
  </main>
</Layout>
