---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Definiere einen Interface-Typ, der die erwartete Struktur der Designaufgaben-Daten spezifiziert
interface DesignAufgabenData {
  title: string;
  description: string;
  order: number;
  category: string;
  tags: string[];
}

// Alle Designaufgaben abrufen
const allDesignaufgaben = await getCollection('designaufgaben');

// Nach order sortieren
const sortedDesignaufgaben = allDesignaufgaben.map(entry => ({
  ...entry,
  data: entry.data as unknown as DesignAufgabenData
})).sort((a, b) => a.data.order - b.data.order);
---

<Layout title="KI-Design Übungsaufgaben | 4K Framework">
  <!-- Sticky Breadcrumb Navigation -->
  <nav class="sticky top-[94px] z-30 bg-gray-800 backdrop-blur-sm border-b border-white/10">
    <div class="container mx-auto px-4 py-3">
      <div class="flex items-center gap-3 text-sm">
        <span class="text-white font-medium px-2 py-1 bg-white/5 rounded">
          Design-Aufgaben
        </span>
      </div>
    </div>
  </nav>

  <main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8">4K Framework: KI-Design Übungsaufgaben</h1>
    <p class="mb-8 text-lg">Praktische Übungen zur Anwendung des 4K Frameworks für AI-Design & AI-Fotografie. Lerne Schritt für Schritt, wie du beeindruckende KI-generierte Bilder erstellst.</p>
    
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {sortedDesignaufgaben.map((aufgabe) => {        
        return (
          <a href={`/designaufgaben/${aufgabe.slug}`} class="block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all h-full flex flex-col">
            <h3 class="text-xl font-semibold mb-3">{aufgabe.data.title}</h3>
            <p class="text-gray-600 dark:text-gray-300 flex-grow">{aufgabe.data.description}</p>
            <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700 flex flex-wrap gap-2">
              {aufgabe.data.tags && aufgabe.data.tags.map((tag: string) => (
                <span class="inline-block px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-300 text-sm font-medium rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          </a>
        );
      })}
    </div>
  </main>
</Layout>
