---
import { getCollection, type CollectionEntry } from "astro:content";
import { Picture, Image } from "astro:assets";
import OptimizedImage from "../ui/OptimizedImage.astro";
import { categoryColors, isValidCategory } from "../../utils/categoryColors";
import { getCategoryImage } from "../../utils/imageImports";

type BlogPost = CollectionEntry<"blog">;

interface Props {
    limit?: number;
    showLoadMore?: boolean;
    title?: string;
    description?: string;
    showCategories?: boolean;
    className?: string;
    posts?: BlogPost[];
}

interface BlogData {
    draft: boolean;
    title: string;
    description: string;
    pubDate: Date;
    categories?: string[];
    tags?: string[];
    heroImage?: string;
    coverImage?: any; // For optimized images
    hasScalableContent?: boolean;
    audio?: string; // Audio file name
}

const {
    limit,
    showLoadMore = false,
    title,
    description,
    showCategories = false,
    className = "",
    posts: providedPosts,
} = Astro.props;

// Only fetch posts if none are provided
const posts =
    providedPosts ||
    (await getCollection("blog", ({ data }: { data: BlogData }) => {
        return import.meta.env.PROD ? !data.draft : true;
    }));

// Sort posts by date (newest first)
const sortedPosts = [...posts].sort((a: BlogPost, b: BlogPost) => {
    return (
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
    );
});

// Apply limit if specified
const finalPosts = limit ? sortedPosts.slice(0, limit) : sortedPosts;

// Extract unique categories with proper typing
const allCategories = posts.flatMap(
    (post: BlogPost) => post.data.categories || [],
);
const categories = showCategories
    ? ([...new Set(allCategories)] as string[])
    : [];

// Format date helper
const formatDate = (date: Date): string => {
    try {
        return new Date(date).toLocaleDateString("de-DE", {
            year: "numeric",
            month: "long",
        });
    } catch {
        return "";
    }
};
---

<section class:list={["blog-posts", className]}>
    <div class="max-container">
        {
            (title || description) && (
                <div class="mb-16">
                    {title && (
                        <h2 class="text-4xl md:text-5xl font-bold mb-6">
                            {title}
                        </h2>
                    )}
                    {description && (
                        <p class="text-xl text-white/80 max-w-2xl">
                            {description}
                        </p>
                    )}
                </div>
            )
        }

        {
            showCategories && categories.length > 0 && (
                <div class="mb-12">
                    <h2 class="text-xl font-bold mb-4">Kategorien</h2>
                    <div class="flex flex-wrap gap-2">
                        {categories.map((category: string) => {
                            const bgColorClass = isValidCategory(category) 
                                ? `${categoryColors[category]} bg-opacity-20` 
                                : "bg-white/5";
                            
                            return (
                                <a
                                    href={`/blog/category/${category.toLowerCase()}`}
                                    class={`px-3 py-1 ${bgColorClass} rounded-full text-sm hover:bg-opacity-30 transition-colors`}
                                    aria-label={`Zeige Artikel in der Kategorie ${category}`}
                                >
                                    {category}
                                </a>
                            );
                        })}
                    </div>
                </div>
            )
        }

        <div class="flex flex-col gap-8">
            {
                finalPosts.map((post: BlogPost) => (
                    <a
                        href={`/blog/${post.id}`}
                        class="block group"
                        aria-label={`Lese den Artikel: ${post.data.title}`}
                    >
                        <article class="flex flex-col md:flex-row gap-6 bg-white dark:bg-gray-800 rounded-xl overflow-hidden border border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all relative">
                            <div class="md:w-[45%] relative">
                                {/* Badges für skalierbare Inhaltstiefe und Audio */}
                                {(post.data.hasScalableContent || post.data.audio) && (
                                    <div class="absolute top-3 left-3 z-10">
                                        <div class="flex gap-2">
                                            {/* Smart Badge */}
                                            {post.data.hasScalableContent && (
                                                <div class="group relative">
                                                    {(() => {
                                                        const category = post.data.categories?.[0] || '';
                                                        const bgColorClass = isValidCategory(category) 
                                                            ? `${categoryColors[category]}` 
                                                            : "bg-primary";
                                                        
                                                        return (
                                                            <span class={`${bgColorClass} bg-opacity-90 text-white text-xs font-bold px-2.5 py-1 rounded-full shadow-md`}>
                                                                Smart
                                                            </span>
                                                        );
                                                    })()}
                                                    
                                                    {/* Tooltip bei Hover */}
                                                    <div class="absolute top-full left-0 mt-2 bg-gray-900 text-white text-xs rounded-lg shadow-lg p-2 w-44 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 ease-in-out z-20">
                                                        Smart Artikel mit skalierbaren Inhaltsdetails
                                                    </div>
                                                </div>
                                            )}

                                            {/* Audio Badge */}
                                            {post.data.audio && (
                                                <div class="relative">
                                                    {(() => {
                                                        const category = post.data.categories?.[0] || '';
                                                        const bgColorClass = isValidCategory(category) 
                                                            ? `${categoryColors[category]}` 
                                                            : "bg-primary";
                                                        
                                                        return (
                                                            <span class={`${bgColorClass} bg-opacity-90 text-white text-xs font-bold px-2.5 py-1 rounded-full shadow-md`}>
                                                                Audio verfügbar
                                                            </span>
                                                        );
                                                    })()}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}
                                {post.data.coverImage ? (
                                    <Image 
                                        src={post.data.coverImage}
                                        alt={post.data.title}
                                        width={800}
                                        height={450}
                                        class="w-full h-full object-cover aspect-[16/9]"
                                        loading="lazy"
                                        transition:name={`hero-${post.id}`}
                                    />
                                ) : post.data.heroImage ? (
                                    <Picture
                                        src={post.data.heroImage}
                                        alt={post.data.title}
                                        formats={["avif", "webp"]}
                                        fallbackFormat="png"
                                        width={800}
                                        height={450}
                                        class="w-full h-full object-cover aspect-[16/9]"
                                        loading="lazy"
                                        transition:name={`hero-${post.id}`}
                                    />
                                ) : (
                                    <Image
                                        src={getCategoryImage(post.data.categories?.[0])}
                                        alt={post.data.title}
                                        width={800}
                                        height={450}
                                        format="webp"
                                        quality={80}
                                        class="w-full h-full object-cover aspect-[16/9]"
                                        loading="lazy"
                                        transition:name={`hero-${post.id}`}
                                    />
                                )}
                            </div>

                            <div class="flex flex-col p-6 md:w-[55%]">
                                <time
                                    datetime={post.data.pubDate.toISOString()}
                                    class="text-sm text-white/60 mb-4"
                                    transition:name={`date-${post.id}`}
                                >
                                    {formatDate(post.data.pubDate)}
                                </time>

                                <h3
                                    class="text-2xl font-bold mb-3 text-white/90 group-hover:text-primary transition-colors"
                                    transition:name={`title-${post.id}`}
                                >
                                    {post.data.title}
                                </h3>

                                <p
                                    class="text-white/70 leading-relaxed mb-4 flex-grow"
                                    transition:name={`excerpt-${post.id}`}
                                >
                                    {post.data.description}
                                </p>

                                <div
                                    class="flex flex-wrap gap-2 mt-auto"
                                    transition:name={`categories-${post.id}`}
                                >
                                    {post.data.categories?.map(
                                        (category: string) => {
                                            const bgColorClass = isValidCategory(category) 
                                                ? `${categoryColors[category]} bg-opacity-20` 
                                                : "bg-white/5";
                                            
                                            return (
                                                <span class={`px-3 py-1 ${bgColorClass} rounded-full group-hover:bg-opacity-30 transition-colors text-sm text-white/60`}>
                                                    {category}
                                                </span>
                                            );
                                        }
                                    )}
                                </div>
                            </div>
                        </article>
                    </a>
                ))
            }
        </div>

        {
            showLoadMore && finalPosts.length > 0 && (
                <div class="mt-12 text-center">
                    <a
                        href="/blog"
                        class="inline-flex items-center px-6 py-3 text-lg font-medium text-white/90 hover:text-primary transition-colors"
                        aria-label="Alle Blog-Artikel ansehen"
                    >
                        Alle Artikel ansehen
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="w-5 h-5 ml-2"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                            aria-hidden="true"
                        >
                            <path
                                fill-rule="evenodd"
                                d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                                clip-rule="evenodd"
                            />
                        </svg>
                    </a>
                </div>
            )
        }
    </div>
</section>

<style>
    .blog-posts {
        margin-bottom: 4rem;
    }
</style>
