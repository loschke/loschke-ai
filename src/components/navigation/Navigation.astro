---
import SocialIcons from "../navigation/SocialIcons.astro";
import { Image } from "astro:assets";
import avatarImage from "../../assets/images/rico-loschke_avatar.jpg";

const navItems = [
    { href: "/guides", label: "Guides" },
    { href: "/projekte", label: "Projekte" },
    { href: "/impulse", label: "Vortr√§ge" },
    { href: "/blog", label: "Blog" },
    { href: "/contact", label: "Anfrage" }
];

// Check if we're on the homepage
const isHomepage = Astro.url.pathname === "/";

// Get current path for active state
const currentPath = Astro.url.pathname;
---

<header class="fixed top-0 left-0 right-0 w-full z-50" id="main-header">
    <div
        class="absolute inset-0 transition-all duration-300 border-b border-transparent"
        id="nav-backdrop"
        style="background-color: rgba(21, 29, 37, var(--bg-opacity, 0)); backdrop-filter: blur(var(--blur-px, 0));"
    >
    </div>
    <div class="container-padding py-6 relative">
        <div class="max-container flex justify-between items-center">
            <!-- Profile Logo -->
            <a href="/" class="flex items-center gap-4 group relative">
                <Image
                    src={avatarImage}
                    alt="Rico Loschke"
                    width={48}
                    height={48}
                    class="rounded-full bg-gradient-to-br from-primary to-primary-dark shadow-lg object-cover"
                    aria-hidden="true"
                />
                <span
                    class="text-xl font-medium tracking-wide text-white/90 group-hover:text-white transition-colors duration-300 hidden md:inline"
                >
                    Hi, ich bin Rico
                </span>
            </a>

            <!-- Desktop Navigation and Social Icons -->
            <div class="hidden md:flex items-center relative">
                <!-- Navigation Menu -->
                <nav class="flex gap-10 mr-16" aria-label="Main navigation">
                    {
                        navItems.map(({ href, label }) => {
                            const isActive =
                                currentPath === href ||
                                (href !== "/" && currentPath.startsWith(href));
                            return (
                                <a
                                    href={href}
                                    class:list={[
                                        "nav-link relative text-white/80 hover:text-white transition-colors",
                                        { active: isActive },
                                    ]}
                                >
                                    {label}
                                    {isActive && (
                                        <div
                                            class="absolute bottom-0 left-0 w-full h-0.5 bg-primary"
                                            transition:name="active-nav"
                                        />
                                    )}
                                </a>
                            );
                        })
                    }
                </nav>

                <!-- Social Icons -->
                <div class="border-l border-white/10 pl-16">
                    <SocialIcons />
                </div>
            </div>

            <!-- Mobile Hamburger Menu Button -->
            <button
                id="mobile-menu-toggle"
                class="md:hidden flex items-center justify-center w-10 h-10 text-white focus:outline-none"
                aria-label="Toggle menu"
                aria-expanded="false"
                aria-controls="mobile-menu"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-8 w-8"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    id="hamburger-icon"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 6h16M4 12h16M4 18h16"
                    />
                </svg>
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-8 w-8 hidden"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    id="close-icon"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M6 18L18 6M6 6l12 12"
                    />
                </svg>
            </button>
        </div>
    </div>

    <!-- Mobile Menu Overlay -->
    <div
        id="mobile-menu"
        class="fixed inset-0 bg-base-darker bg-opacity-95 backdrop-blur-lg z-40 transform translate-x-full transition-transform duration-300 md:hidden"
        aria-hidden="true"
    >
        <div class="container-padding py-24 h-full flex flex-col">
            <!-- Close button inside the menu -->
            <button
                id="mobile-menu-close"
                class="absolute top-6 right-8 flex items-center justify-center w-10 h-10 text-white focus:outline-none"
                aria-label="Close menu"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-8 w-8"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M6 18L18 6M6 6l12 12"
                    />
                </svg>
            </button>
            
            <nav class="flex flex-col gap-8 items-center" aria-label="Mobile navigation">
                {
                    navItems.map(({ href, label }) => {
                        const isActive =
                            currentPath === href ||
                            (href !== "/" && currentPath.startsWith(href));
                        return (
                            <a
                                href={href}
                                class:list={[
                                    "nav-link text-2xl text-white/80 hover:text-white transition-colors",
                                    { active: isActive },
                                ]}
                            >
                                {label}
                            </a>
                        );
                    })
                }
            </nav>
            <div class="mt-auto flex justify-center">
                <SocialIcons />
            </div>
        </div>
    </div>
</header>

<style>
    .nav-link {
        position: relative;
        z-index: 1;
    }

    .nav-link::after {
        content: "";
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: currentColor;
        transform: scaleX(0);
        transition: transform 0.3s ease;
    }

    .nav-link:not(.active):hover::after {
        transform: scaleX(1);
    }

    .nav-link.active {
        color: theme(colors.white);
    }

    #nav-backdrop.scrolled {
        border-color: rgba(255, 255, 255, 0.1);
    }

    /* Mobile menu animation */
    #mobile-menu.open {
        transform: translateX(0);
    }
</style>

<script>
    const updateNavigation = () => {
        const backdrop = document.getElementById("nav-backdrop");
        if (window.scrollY > 0) {
            backdrop?.style.setProperty("--bg-opacity", "0.95");
            backdrop?.style.setProperty("--blur-px", "16px");
            backdrop?.classList.add("scrolled");
        } else {
            backdrop?.style.setProperty("--bg-opacity", "0");
            backdrop?.style.setProperty("--blur-px", "0px");
            backdrop?.classList.remove("scrolled");
        }
    };

    window.addEventListener("scroll", updateNavigation, { passive: true });
    updateNavigation();

    // Mobile menu toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
        const menuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenuClose = document.getElementById('mobile-menu-close');
        const mobileMenu = document.getElementById('mobile-menu');
        const hamburgerIcon = document.getElementById('hamburger-icon');
        const closeIcon = document.getElementById('close-icon');
        const body = document.body;

        // Check if all required elements exist
        if (!menuToggle || !mobileMenu || !hamburgerIcon || !closeIcon) {
            console.error('Mobile menu elements not found');
            return;
        }

        // Function to open the mobile menu
        const openMobileMenu = () => {
            if (!mobileMenu || !hamburgerIcon || !closeIcon || !menuToggle) return;
            
            mobileMenu.classList.add('open');
            hamburgerIcon.classList.add('hidden');
            closeIcon.classList.remove('hidden');
            menuToggle.setAttribute('aria-expanded', 'true');
            mobileMenu.setAttribute('aria-hidden', 'false');
            body.style.overflow = 'hidden';
        };

        // Function to close the mobile menu
        const closeMobileMenu = () => {
            if (!mobileMenu || !hamburgerIcon || !closeIcon || !menuToggle) return;
            
            mobileMenu.classList.remove('open');
            hamburgerIcon.classList.remove('hidden');
            closeIcon.classList.add('hidden');
            menuToggle.setAttribute('aria-expanded', 'false');
            mobileMenu.setAttribute('aria-hidden', 'true');
            body.style.overflow = '';
        };

        // Toggle menu when clicking the hamburger button
        menuToggle.addEventListener('click', () => {
            const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
            
            if (isExpanded) {
                closeMobileMenu();
            } else {
                openMobileMenu();
            }
        });

        // Close menu when clicking the close button inside the menu
        if (mobileMenuClose) {
            mobileMenuClose.addEventListener('click', closeMobileMenu);
        }

        // Close mobile menu when clicking on a link
        const mobileLinks = mobileMenu.querySelectorAll('a');
        mobileLinks.forEach(link => {
            link.addEventListener('click', closeMobileMenu);
        });

        // Close mobile menu when pressing Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && mobileMenu.classList.contains('open')) {
                closeMobileMenu();
            }
        });
    });
</script>
